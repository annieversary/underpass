@top Oql { statement* }

@skip { space | LineComment | LineCommentTitle }

@detectDelim

@tokens {
    space { @whitespace+ }
    LineCommentTitle { "///" ![\n]* }
    LineComment { "//" ![\n]* }
    @precedence { LineCommentTitle, LineComment }

    Keyword { "node" | "way" | "relation" | "nw" | "wr" | "nr" | "NR" }

    Variable { (@asciiLetter | "_" | @digit)+ }

    Identifier { ident }
    //! TODO this is most definitely not ascii but for now
    ident { (@asciiLetter | "_" | ":" | "|" | @digit)+ }

    macroIdent { (@asciiLetter | "_" | @digit)+ }
    macroValue { ((@asciiLetter | "_" | "|" | "\"" | @digit)+) }

    Number { @digit+ }

    Regex { "\"" (![~/\\\n[] | "\\" ![\n] | "[" (![\n\\\]] | "\\" ![\n])* "]")+ "\"" }
    @precedence { space, Regex }

    "(" ")" "[" "]" "{" "}" "->" "@"
}



statement {
     (Difference | Union | Macro | Query)
     Assignment?
     ";"
}

Union {
      "(" statement* ")"
}

Difference {
      "(" statement "-" statement ")"
}

Query {
  Keyword SquareFilter* RoundFilter?
}

SquareFilter {
    "[" (Tag | Macro) "]"
}
RoundFilter {
    "(" (Around | Number | Macro) ")"
}

Around {
       "around" Set? ":" Radius
}
Radius { Number }

optionallyQuoted<id> {
    "\""? id "\""?
}

Key { Identifier }
Value { Identifier }

Tag {
  ("~" Regex | optionallyQuoted<Key>)
  ("=" optionallyQuoted<Value> | "~" Regex)?
}

Macro {
  "{{" macroIdent (":" MacroValue (";" MacroValue)?)? "}}"
}

MacroValue {
   macroValue ("@" LanguageCode)?
}

LanguageCode {
    ident
}

Assignment {
  "->" Set
}

Set {
  "." Variable
}
